{"version":3,"sources":["components/ShowPhonetic.js","components/ShowPhonetics.js","components/ShowWordDefinitions.js","components/ShowMeanings.js","components/ShowPrettyWord.js","components/ShowPrettyWords.js","App.js","reportWebVitals.js","index.js"],"names":["ShowPhonetic","props","element","dataPhonetics","undefined","audio","className","text","href","ShowPhonetics","phoneticsList","data","jsxPhoneticsList","phonetics","forEach","el","push","ShowWordDefinitions","definitions","arr","el1","index","example","definition","ShowMeanings","prettyWord","meanings","map","word","partOfSpeech","ShowPrettyWord","phonetic","origin","ShowPrettyWords","output","fetchWord","a","fieldWord","document","getElementById","value","fetch","response","json","rawData","doAssignmentA","place","retVal","ReactDOM","render","title","JSON","stringify","doAssignmentB","id","doAssignmentC","App","type","defaultValue","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.a319bcdf.chunk.js","sourcesContent":["import \"./ShowPhonetic.css\";\r\n\r\nconst ShowPhonetic = (props) => {\r\n  const element = props.dataPhonetics;\r\n  if (element.audio === undefined) {\r\n    return <p className=\"phonetics\">/{element.text}/</p>;\r\n  }\r\n  return (\r\n    <p className=\"phonetics\">\r\n      /{element.text}/ <a href={element.audio}>audio</a>\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default ShowPhonetic;\r\n","import ShowPhonetic from \"./ShowPhonetic\";\r\n\r\nconst ShowPhonetics = (props) => {\r\n  const phoneticsList = props.data;\r\n  const jsxPhoneticsList = [];\r\n  phoneticsList.phonetics.forEach((el) => {\r\n    jsxPhoneticsList.push(<ShowPhonetic dataPhonetics={el} />);\r\n  });\r\n  return <span>{jsxPhoneticsList}</span>;\r\n};\r\n\r\nexport default ShowPhonetics;\r\n","import \"./ShowWordDefinitions.css\";\r\n\r\nconst ShowWordDefinitions = (props) => {\r\n  const definitions = props.data;\r\n  const arr = [];\r\n\r\n  definitions.forEach((el1, index) => {\r\n    if (typeof el1.example !== \"undefined\") {\r\n      arr.push(\r\n        <li key={index}>\r\n          <span>{el1.definition}</span>\r\n          <br />\r\n          <p>\r\n            <span className=\"example_title\">Example: </span>{\" \"}\r\n            <span className=\"example\">{el1.example}</span>\r\n          </p>\r\n          <hr className=\"hor_rule\" />\r\n        </li>\r\n      );\r\n    } else {\r\n      arr.push(\r\n        <li key={index}>\r\n          <span>{el1.definition}</span>\r\n          <hr className=\"hor_rule\" />\r\n        </li>\r\n      );\r\n    }\r\n  });\r\n  return <div className=\"wordDefintions\">{arr}</div>;\r\n};\r\n\r\nexport default ShowWordDefinitions;\r\n","import ShowWordDefinitions from \"./ShowWordDefinitions\";\r\nimport \"./ShowMeanings.css\";\r\n\r\nconst ShowMeanings = (props) => {\r\n  const prettyWord = props.meanings;\r\n  const meaning = prettyWord.meanings.map((el, index) => (\r\n    <div>\r\n      <li key={index} className=\"partOfSpeech\">\r\n        <span className=\"meaning_word\">{prettyWord.word}, </span>\r\n        <span>{el.partOfSpeech}</span>\r\n      </li>\r\n      <ol>\r\n        <ShowWordDefinitions data={el.definitions} />\r\n      </ol>\r\n    </div>\r\n  ));\r\n\r\n  return meaning;\r\n};\r\n\r\nexport default ShowMeanings;\r\n","import ShowMeanings from \"./ShowMeanings\";\r\nimport \"./ShowPrettyWord.css\";\r\n\r\nconst ShowPrettyWord = (props) => {\r\n  const prettyWord = props.data;\r\n  return (\r\n    <div>\r\n      <span className=\"word\">{prettyWord.word}</span> —{\" \"}\r\n      <span className=\"word_phonetic\">/{prettyWord.phonetic}/</span>\r\n      <br />\r\n      <span>\r\n        <u>Origin:</u> {prettyWord.origin}\r\n      </span>\r\n      <ol>\r\n        <ShowMeanings meanings={prettyWord} />\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowPrettyWord;\r\n","import ShowPrettyWord from \"./ShowPrettyWord\";\r\nimport \"./ShowPrettyWords.css\";\r\n\r\nconst ShowPrettyWords = (props) => {\r\n  const allWords = props.data;\r\n  const output = allWords.map((el, index) => (\r\n    <li key={index} className=\"showPrettyWord\">\r\n      <ShowPrettyWord data={el} />\r\n    </li>\r\n  ));\r\n  return (\r\n    <div>\r\n      <ol>{output}</ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowPrettyWords;\r\n\r\n// carefull about syntax () not {} when napping to jsx\r\n","import \"./App.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ShowPhonetics from \"./components/ShowPhonetics\";\nimport ShowPrettyWords from \"./components/ShowPrettyWords\";\n\nlet url = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\n\nconst fetchWord = async () => {\n  const fieldWord = document.getElementById(\"word_input\").value;\n  try {\n    const response = await fetch(`${url}${fieldWord}`);\n    const rawData = await response.json();\n    return rawData;\n  } catch (error) {\n    return undefined;\n  }\n};\n\nconst doAssignmentA = async () => {\n  let place = document.getElementById(\"output\");\n  let retVal = await fetchWord();\n  if (typeof retVal === \"undefined\") {\n    ReactDOM.render(<p>Enter a word to search</p>, place);\n  } else if (retVal.title === \"No Definitions Found\") {\n    ReactDOM.render(<p>No Definitions Found</p>, place);\n  } else {\n    ReactDOM.render(JSON.stringify(retVal), place);\n  }\n};\n\nconst doAssignmentB = async () => {\n  let place = document.getElementById(\"output\");\n  let retVal = await fetchWord();\n  if (typeof retVal === \"undefined\") {\n    ReactDOM.render(<p>Enter a word to search</p>, place);\n  } else if (retVal.title === \"No Definitions Found\") {\n    ReactDOM.render(<p>No Definitions Found</p>, place);\n  } else {\n    ReactDOM.render(\n      <div>\n        <span id=\"assB_word\">{retVal[0].word}</span> —{\" \"}\n        <ShowPhonetics data={retVal[0]} />\n      </div>,\n      place\n    );\n  }\n};\n\nconst doAssignmentC = async () => {\n  let place = document.getElementById(\"output\");\n  let retVal = await fetchWord();\n  if (typeof retVal === \"undefined\") {\n    ReactDOM.render(<p>Enter a word to search</p>, place);\n  } else if (retVal.title === \"No Definitions Found\") {\n    ReactDOM.render(<p>No Definitions Found</p>, place);\n  } else {\n    ReactDOM.render(\n      <div>\n        <ShowPrettyWords data={retVal} />\n      </div>,\n      place\n    );\n  }\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">BRAINS DICTIONARY</h1>\n      <section>\n        <input type=\"text\" id=\"word_input\" defaultValue=\"duck\" />\n      </section>\n      <section>\n        <button onClick={doAssignmentA} className=\"clicky_1\">\n          Search for word (A)\n        </button>\n        <button onClick={doAssignmentB} className=\"clicky_1\">\n          Search phonetics (B)\n        </button>\n        <button onClick={doAssignmentC} className=\"clicky_1\">\n          Show all definitions (C)\n        </button>\n      </section>\n      <section className=\"section_output\">\n        <div id=\"output\"></div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}